package com.l2ashdz.appgraficar.analizadores.sintactico;

import com.l2ashdz.appgraficar.model.Token;
import com.l2ashdz.appgraficar.model.animaciones.Animacion;
import com.l2ashdz.appgraficar.model.errores.ErrorAnalisis;
import com.l2ashdz.appgraficar.model.errores.TipoError;
import com.l2ashdz.appgraficar.model.figuras.*;
import com.l2ashdz.appgraficar.model.otros.AnimacionUsada;
import com.l2ashdz.appgraficar.model.otros.FiguraUsada;

import java.util.ArrayList;
import java.util.List;

import java_cup.runtime.Symbol;

parser code {:

       private List<ErrorAnalisis> errores = new ArrayList();
       private List<Figura> figurasAGraficar = new ArrayList();
       private List<Animacion> animaciones = new ArrayList();
       private List<AnimacionUsada> usoAnimaciones = new ArrayList();
       private FiguraUsada usoLinea = new FiguraUsada("Linea");

       public List<ErrorAnalisis> getErrores(){
              return this.errores;
       }

       public List<Figura> getFiguras(){
              return this.figurasAGraficar;
       }

       public List<Animacion> getAnimaciones(){
              return this.animaciones;
       }

       public List<AnimacionUsada> getUsoAnimaciones(){
              return this.usoAnimaciones;
       }

       public FiguraUsada getUsoLinea(){
              return this.usoLinea;
       }
       
       public void syntax_error(Symbol s){
              Token t = (Token) s.value;
              StringBuilder descripcion = new StringBuilder("Se esperaba: ");
              expected_token_ids().forEach(x -> descripcion.append(symbl_name_from_id(x)).append(" "));
              //report_error("Error sintactico en tonken: "+t.getName()+", en la linea: "+t.getLinea()+" y columna: "+t.getColumna()+", intentado recuperarse", cur_token);
              errores.add(new ErrorAnalisis(t.getName(), t.getLinea(), t.getColumna(), TipoError.SINTACTICO, descripcion.toString()));
       }

       private void aumentarAnimacionUsada(String animacion){
              if(usoAnimaciones.isEmpty()){
                     usoAnimaciones.add(new AnimacionUsada(animacion));
              } else {
                  boolean add = true;
                  
                  for (AnimacionUsada a : usoAnimaciones) {
                      if (a.getNombre().equals(animacion)) {
                          a.aumentar();
                          add = false;
                      }
                  }
                  
                  if (add) {
                     usoAnimaciones.add(new AnimacionUsada(animacion));
                  }
              }
          }
:}

/*Terminales y no terminales*/
terminal Token      GRAFICAR, ANIMAR, OBJETO, ANTERIOR, CURVA;
terminal Token      CIRCULO, CUADRADO, RECTANGULO, LINEA, POLIGONO;
terminal Token      NEGRO, AZUL, ROJO, VERDE, AMARILLO, NARANJA, MORADO, CAFE;
terminal Token      SUMA, RESTA, MULT, DIV, PA, PC, COMA;
terminal Token      NUMERO;

non terminal        nose, graph, figura, param_s, param_c, param_r, param_l, param_p, color, animate, tipoA;
non terminal Float  posx, posy, lado, radio, alto, ancho, cant_lados, expr;

//Precedencias
precedence left SUMA, RESTA;
precedence left MULT, DIV;

/*Gramatica*/

nose ::= graph
       | graph nose
       ;

graph ::= GRAFICAR figura
        | GRAFICAR figura animate

        | error PC                        {:System.out.println("Error, estructura incorrecta");:}
        ;
//Agrgar opcion para ognorar cuando vienen varias estructuras animar seguidas
animate ::= ANIMAR OBJETO ANTERIOR PA posx:x COMA posy:y COMA tipoA:ta PC 
           {:
              animaciones.add(new Animacion(figurasAGraficar.get(figurasAGraficar.size()-1), x, y, ta.toString()));
           :}
           ;

tipoA ::= LINEA:l      {:RESULT = l.getName();aumentarAnimacionUsada("Linea");:}
        | CURVA:c      {:RESULT = c.getName();aumentarAnimacionUsada("Curva");:}
        ;

figura ::= CUADRADO:f PA param_s PC         {:RESULT = f.getName();:}
         | CIRCULO:f PA param_c PC          {:RESULT = f.getName();:}
         | RECTANGULO:f PA param_r PC       {:RESULT = f.getName();:}
         | LINEA:f PA param_l PC            {:RESULT = f.getName();usoLinea.aumentar();:}
         | POLIGONO:f PA param_p PC         {:RESULT = f.getName();:}
         ;

param_s ::= posx:x COMA posy:y COMA lado:l COMA color:c
            {:
                figurasAGraficar.add(new Cuadrado(l, x, y, c.toString()));
            :}
            ;

param_c ::= posx:x COMA posy:y COMA radio:r COMA color:c
            {:
                figurasAGraficar.add(new Circulo(r, x, y, c.toString()));
            :}
            ;

param_r ::= posx:x COMA posy:y COMA alto:h COMA ancho:w COMA color:c
            {:
                figurasAGraficar.add(new Rectangulo(h, w, x, y, c.toString()));
            :}
            ;

param_l ::= posx:x COMA posy:y COMA posx:x2 COMA posy:y2 COMA color:c
            {:
                figurasAGraficar.add(new Linea(x2, y2, x, y, c.toString()));
            :}
            ;

param_p ::= posx:x COMA posy:y COMA alto:h COMA ancho:w COMA cant_lados:cl COMA color:c
            {:
                figurasAGraficar.add(new Poligono(h, w, cl.intValue(), x, y, c.toString()));
            :}
            ;

posx ::= expr:n        {:RESULT = n;:}
       ;

posy ::= expr:n        {:RESULT = n;:}
       ;

lado ::= expr:n        {:RESULT = n;:}
       ;

radio ::= expr:n        {:RESULT = n;:}
        ;

alto ::= expr:n        {:RESULT = n;:}
       ;

ancho ::= expr:n        {:RESULT = n;:}
       ;

cant_lados ::= expr:n        {:RESULT = n;:}
             ;
       
color ::= NEGRO:c      {:RESULT = c.getName();:}
        | AZUL:c       {:RESULT = c.getName();:}
        | ROJO:c       {:RESULT = c.getName();:}
        | VERDE:c      {:RESULT = c.getName();:}
        | AMARILLO:c   {:RESULT = c.getName();:}
        | NARANJA:c    {:RESULT = c.getName();:}
        | MORADO:c     {:RESULT = c.getName();:}
        | CAFE:c       {:RESULT = c.getName();:}
        ;

expr ::= expr:e1 SUMA expr:e2          {:RESULT = e1 + e2;:}
       | expr:e1 RESTA expr:e2         {:RESULT = e1 - e2;:}
       | expr:e1 MULT expr:e2          {:RESULT = e1 * e2;:}
       | expr:e1 DIV expr:e2           {:RESULT = e1 / e2;:}
       | PA expr:e PC                  {:RESULT = e;:}
       | PA expr:e1 PC SUMA expr:e2    {:RESULT = e1 + e2;:} 
       | PA expr:e1 PC RESTA expr:e2   {:RESULT = e1 - e2;:} 
       | PA expr:e1 PC MULT expr:e2    {:RESULT = e1 * e2;:} 
       | PA expr:e1 PC DIV expr:e2     {:RESULT = e1 / e2;:} 
       | NUMERO:n                      {:RESULT = n.getNumero();:}
       ;