package analizador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;

parser code {:

       private List<ErrorAnalisis> errores = new ArrayList();

       public List<ErrorAnalisis> getErrores(){
              return this.errores;
       }

       public void syntax_error(Symbol s){
              Token t = (Token) s.value;
              StringBuilder descripcion = new StringBuilder("Se esperaba: ");
              expected_token_ids().forEach(x -> descripcion.append(symbl_name_from_id(x)).append(" "));
              //report_error("Error sintactico en tonken: "+t.getName()+", en la linea: "+t.getLinea()+" y columna: "+t.getColumna()+", intentado recuperarse", cur_token);
              errores.add(new ErrorAnalisis(t.getName(), t.getLinea(), t.getColumna(), TipoError.SINTACTICO, descripcion.toString()));
       }
:}

/*Terminales y no terminales*/
terminal Token      GRAFICAR, ANIMAR, OBJETO, ANTERIOR, CURVA;
terminal Token      CIRCULO, CUADRADO, RECTANGULO, LINEA, POLIGONO;
terminal Token      NEGRO, AZUL, ROJO, VERDE, AMARILLO, NARANJA, MORADO, CAFE;
terminal Token      SUMA, RESTA, MULT, DIV, PA, PC, COMA;
terminal Token      NUMERO;

non terminal        nose, graph, figura, param_s, param_c, param_r, param_l, param_p, color;
non terminal Token  animate, tipoA;
non terminal Float  posx, posy, lado, radio, alto, ancho, cant_lados, expr;

//Precedencias
precedence left SUMA, RESTA;
precedence left MULT, DIV;

/*Gramatica*/

nose ::= graph
       | graph nose
       ;

graph ::= GRAFICAR figura
        | GRAFICAR figura:f animate:a {:System.out.println("Animando " + f + " con " + a.getName());:}
        | error PC      {:System.out.println("Error, estructura incorrecta");:}
        ;

animate ::= ANIMAR OBJETO ANTERIOR PA posx COMA posy COMA tipoA:ta PC {:RESULT = ta;:};

tipoA ::= LINEA:l      {:RESULT = l;:}
        | CURVA:c      {:RESULT = c;:}
        ;

figura ::= CUADRADO:f PA param_s PC         {:RESULT = f.getName();:}
         | CIRCULO:f PA param_c PC          {:RESULT = f.getName();:}
         | RECTANGULO:f PA param_r PC       {:RESULT = f.getName();:}
         | LINEA:f PA param_l PC            {:RESULT = f.getName();:}
         | POLIGONO:f PA param_p PC         {:RESULT = f.getName();:}
         ;

param_s ::= posx:x COMA posy:y COMA lado:l COMA color:c
            {:
                System.out.println("\nGraficando cuadrado color " + c);
                System.out.println("posx: "+ x + " - posy: " + y + " - lado: " + l);
            :}
            ;

param_c ::= posx:x COMA posy:y COMA radio:r COMA color:c
            {:
                System.out.println("\nGraficando circulo color " + c);
                System.out.println("posx: "+ x + " - posy: " + y + " - radio: " + r);
            :}
            ;

param_r ::= posx:x COMA posy:y COMA alto:h COMA ancho:w COMA color:c
            {:
                System.out.println("\nGraficando rectangulo color " + c);
                System.out.println("posx: "+ x + " - posy: " + y + " - altura: " + h + " - ancho: " + w);
            :}
            ;

param_l ::= posx:x COMA posy:y COMA posx:x2 COMA posy:y2 COMA color:c
            {:
                System.out.println("\nGraficando linea color " + c);
                System.out.println("posx: "+ x + " - posy: " + y + "posx2: "+ x2 + " - posy2: " + y2);
            :}
            ;

param_p ::= posx:x COMA posy:y COMA alto:h COMA ancho:w COMA cant_lados:cl COMA color:c
            {:
                System.out.println("\nGraficando poligono color " + c);
                System.out.println("posx: "+ x + " - posy: " + y + " - alto: " + h + " - ancho: " + w + " - cant lados: " + cl);
            :}
            ;

posx ::= expr:n        {:RESULT = n;:}
       ;

posy ::= expr:n        {:RESULT = n;:}
       ;

lado ::= expr:n        {:RESULT = n;:}
       ;

radio ::= expr:n        {:RESULT = n;:}
        ;

alto ::= expr:n        {:RESULT = n;:}
       ;

ancho ::= expr:n        {:RESULT = n;:}
       ;

cant_lados ::= expr:n        {:RESULT = n;:}
             ;
       
color ::= NEGRO:c      {:RESULT = c.getName();:}
        | AZUL:c       {:RESULT = c.getName();:}
        | ROJO:c       {:RESULT = c.getName();:}
        | VERDE:c      {:RESULT = c.getName();:}
        | AMARILLO:c   {:RESULT = c.getName();:}
        | NARANJA:c    {:RESULT = c.getName();:}
        | MORADO:c     {:RESULT = c.getName();:}
        | CAFE:c       {:RESULT = c.getName();:}
        ;

expr ::= expr:e1 SUMA expr:e2          {:RESULT = e1 + e2;:}
       | expr:e1 RESTA expr:e2         {:RESULT = e1 - e2;:}
       | expr:e1 MULT expr:e2          {:RESULT = e1 * e2;:}
       | expr:e1 DIV expr:e2           {:RESULT = e1 / e2;:}
       | PA expr:e PC                  {:RESULT = e;:}
       | PA expr:e1 PC SUMA expr:e2    {:RESULT = e1 + e2;:} 
       | PA expr:e1 PC RESTA expr:e2   {:RESULT = e1 - e2;:} 
       | PA expr:e1 PC MULT expr:e2    {:RESULT = e1 * e2;:} 
       | PA expr:e1 PC DIV expr:e2     {:RESULT = e1 / e2;:} 
       | NUMERO:n                      {:RESULT = n.getNumero();:}
       ;